from os import path
dirname = path.dirname(__file__)

# The public facing hostname of the MDM
# This will also be used as the self signed certificate dnsname
PUBLIC_HOSTNAME = 'commandment.dev'

# Configure your Database URI.
# All SQLAlchemy options are available here:
# http://flask-sqlalchemy.pocoo.org/2.1/config/
SQLALCHEMY_DATABASE_URI = 'sqlite:///commandment.db'

# Development mode listen port
PORT = 5443

# You may supply the certificate as a pair of PEM encoded files, or as a .p12 container.
# If you supply .p12 it will be encoded as a PEM keypair
PUSH_CERTIFICATE = '../push.pem'
PUSH_KEY = '../push.key'
PUSH_CERTIFICATE_PASSWORD = 'sekret'  # for pkcs12 only

# If commandment is running in development mode, specify the path to the certificate and private key.
# These can also be generated at start up.
# Normally SSL should be handled by Apache/Nginx/etc.

CA_CERTIFICATE = path.join(dirname, 'ssl', 'ca.crt')
SSL_CERTIFICATE = path.join(dirname, 'ssl', 'server.crt')
SSL_RSA_KEY = path.join(dirname, 'ssl', 'server.key')

# If not using external storage, the path to the root directory for upload storage.
# This should not be used in production.

STORAGE_ROOT = path.join(dirname, 'storage')

# OAuth2 Configuration

OAUTH2_CLIENT_ID = ''
OAUTH2_REDIRECT_URL = None  # If required to override

# Developer settings

# If loading assets via webpack-dev-server, the URL prefix to use.
# NOTE: This only takes effect if DEBUG is not set to 0 or None
WEBPACK_BASE_URL = 'https://localhost:4000'

# All Other Available Settings

# Flask-OAuthlib
# OAUTH2_PROVIDER_ERROR_URI = '/oauth/errors'
# OAUTH2_PROVIDER_ERROR_ENDPOINT
# OAUTH2_PROVIDER_TOKEN_EXPIRES_IN = 3600
